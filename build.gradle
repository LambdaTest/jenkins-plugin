/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.7/userguide/java_library_plugin.html
 */

buildscript {
    repositories {
        maven {
            name "jenkins"
            delegate.url("http://repo.jenkins-ci.org/releases/")
        }
        // The plugin is currently only available via the Jenkins
        // Maven repository, but has dependencies in Maven Central.
        mavenCentral()
    }
    dependencies {
        classpath 'org.jenkins-ci.tools:gradle-jpi-plugin:0.28.1'
    }
}

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'org.jenkins-ci.jpi' version '0.27.0'
    id 'net.researchgate.release' version '2.6.0'
}

group = 'org.jenkins-ci.plugins'
version = '1.16'
description = 'LambdaTest Plugin is used to run automated selenium tests on LambdaTest Cloud'

sourceCompatibility = 1.8
targetCompatibility = 1.8

jenkinsPlugin {
    // version of Jenkins core this plugin depends on, must be 1.420 or later
    coreVersion = '2.120'

    // ID of the plugin, defaults to the project name without trailing '-plugin'
    shortName = 'lambdatest-automation'

    // human-readable name of plugin                                               
    displayName = 'LambdaTest Automation Plugin'
    
    // human-readable name of plugin 
    //name = 'LambdaTest Automation Plugin'

	// use the plugin class loader before the core class loader, defaults to false
    pluginFirstClassLoader = true

    // optional list of package prefixes that your plugin doesn't want to see from core 
    maskClasses = 'groovy.grape org.apache.commons.codec'

    // optional version number from which this plugin release is configuration-compatible
    compatibleSinceVersion = '1.1.0'
    
    // set the directory from which the development server will run, defaults to 'work'
   	workDir = file('/tmp/jenkins')
    
    // URL used to deploy the plugin, defaults to the value shown
    // the system property 'jpi.repoUrl' can be used to override this option
    repoUrl = 'https://repo.jenkins-ci.org/releases'
    
    gitHubUrl = 'https://github.com/jenkinsci/lambdatest-automation-plugin'

    // URL used to deploy snapshots of the plugin, defaults to the value shown
    // the system property 'jpi.snapshotRepoUrl' can be used to override this option
    snapshotRepoUrl = 'https://repo.jenkins-ci.org/snapshots'

    // enable injection of additional tests for checking the syntax of Jelly and other things
    disabledTestInjection = false

    // the output directory for the localizer task relative to the project root, defaults to the value shown
    localizerOutputDir = "${project.buildDir}/generated-src/localizer"

    // disable configuration of Maven Central, the local Maven cache and the Jenkins Maven repository, defaults to true
    configureRepositories = false

    // skip configuration of publications and repositories for the Maven Publishing plugin, defaults to true
    configurePublishing = false

    // plugin file extension, either 'jpi' or 'hpi', defaults to 'hpi'
    fileExtension = 'hpi'

    // the licenses section is optional, and corresponds to the POM licenses section
    licenses {
        license {
            name 'Mozilla Public License 2.0'
            url 'https://www.mozilla.org/en-US/MPL/2.0/'
            distribution 'repo'
            comments 'A business-friendly OSS license'
        }
    }
}

test {
	ignoreFailures = true
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'
	
	jenkinsPlugins 'org.jenkins-ci.plugins:matrix-project:1.4'
    jenkinsPlugins 'org.jenkinsci.plugins:git:1.1.25'
    jenkinsPlugins 'org.jenkins-ci.plugins:credentials:2.1.10'
	optionalJenkinsPlugins 'org.jenkins-ci.plugins:ant:1.2'
	//jenkinsTest 'org.jenkins-ci.main:maven-plugin:2.17'
	jenkinsServer 'org.jenkins-ci.plugins:ant:1.2'
	compile group: 'org.jenkins-ci.plugins', name: 'structs', version:'1.7'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.7'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.7'

	
	compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.6'
	compile group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.10'
	
	compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.2'
	compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.2'
	
	
	// Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
     maven { url "https://repo.jenkins-ci.org/public/" }
     maven { url "http://repo.maven.apache.org/maven2" }
     maven { url "http://repo.spring.io/plugins-release/" }
     mavenCentral()
}

release {
    failOnSnapshotDependencies = false
    failOnUnversionedFiles = false
   	buildTasks = ['build']
    scmAdapters = [net.researchgate.release.GitAdapter]

    git {
        requireBranch = 'master'
        pushToRemote = 'origin'
        commitVersionFileOnly = false
        signTag = false
    }
}
